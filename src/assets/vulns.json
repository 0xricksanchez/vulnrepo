[
    {
        "title": "[XSS] Cross site scripting vulnerability",
        "poc": "",
        "desc": "Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it. An attacker can use XSS to send a malicious script to an unsuspecting user. The end users browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.",
        "severity": "Medium",
        "ref": "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\nhttps://en.wikipedia.org/wiki/Cross-site_scripting",
        "cvss": "4.3",
        "cve": ""
    },
    {
        "title": "[XSS] DOM-based",
        "poc": "",
        "desc": "DOM Based XSS (or as it is called in some texts, “type-0 XSS”) is an XSS attack wherein the attack payload is executed as a result of modifying the DOM “environment” in the victim’s browser used by the original client side script, so that the client side code runs in an “unexpected” manner. That is, the page itself (the HTTP response that is) does not change, but the client side code contained in the page executes differently due to the malicious modifications that have occurred in the DOM environment.",
        "severity": "Medium",
        "ref": "https://www.owasp.org/index.php/DOM_Based_XSS",
        "cvss": "4",
        "cve": ""
    },    
    {
        "title": "[CSRF] Cross-site request forgery",
        "poc": "",
        "desc": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) [9] exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.",
        "severity": "High",
        "ref": "http://cwe.mitre.org/data/definitions/352.html",
        "cvss": "5",
        "cve": ""
    },
    {
        "title": "[SSRF] Server Side Request Forgery",
        "poc": "",
        "desc": "Server Side Request Forgery (SSRF) is a vulnerability that appears when an attacker has the ability to create requests from the vulnerable server.\nUsually, Server Side Request Forgery (SSRF) attacks target internal systems behind the firewall that are normally inaccessible from the outside world (but using SSRF it’s possible to access these systems). With SSRF it’s also possible to access services from the same server that is listening on the loopback interface.",
        "severity": "Medium",
        "ref": "http://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/",
        "cvss": "4",
        "cve": ""
    },	
    {
        "title": "Buffer Overflow",
        "poc": "",
        "desc": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer. In this case, a buffer is a sequential section of memory allocated to contain anything from a character string to an array of integers. Writing outside the bounds of a block of allocated memory can corrupt data, crash the program, or cause the execution of malicious code.",
        "severity": "Critical",
        "ref": "https://www.owasp.org/index.php/Buffer_Overflow",
        "cvss": "9.0-10",
        "cve": ""
    },
    {
        "title": "[DoS] Denial of Service",
        "poc": "",
        "desc": "Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.\n\nMany times DoS attacks will attempt to consume all of a web site's available system resources such as: CPU, memory, disk space etc. When any one of these critical resources reach full utilization, the web site will normally be inaccessible.\n\nAs today's web application environments include a web server, database server and an authentication server, DoS at the application layer may target each of these independent components. Unlike DoS at the network layer, where a large number of connection attempts are required, DoS at the application layer is a much simpler task to perform.",
        "severity": "Low",
        "ref": "https://en.wikipedia.org/wiki/Denial-of-service_attack",
        "cvss": "3",
        "cve": ""
    },	
    {
        "title": "[RFI] Remote File Inclusion",
        "poc": "",
        "desc": "Remote File Include (RFI) is an attack technique used to exploit 'dynamic file include' mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.\n\nAlmost all web application frameworks support file inclusion. File inclusion is mainly used for packaging common code into separate files that are later referenced by main application modules. When a web application references an include file, the code in this file may be executed implicitly or explicitly by calling specific procedures. If the choice of module to load is based on elements from the HTTP request, the web application might be vulnerable to RFI.",
        "severity": "Critical",
        "ref": "http://cwe.mitre.org/data/definitions/98.html",
        "cvss": "7.0-9.0",
        "cve": ""
    },
    {
        "title": "SQL Injection",
        "poc": "",
        "desc": "SQL Injection is an attack technique used to exploit applications that construct SQL statements from user-supplied input. When successful, the attacker is able to change the logic of SQL statements executed against the database.\n\nStructured Query Language (SQL) is a specialized programming language for sending queries to databases. The SQL programming language is both an ANSI and an ISO standard, though many database products supporting SQL do so with proprietary extensions to the standard language. Applications often use user-supplied data to create SQL statements. If an application fails to properly construct SQL statements it is possible for an attacker to alter the statement structure and execute unplanned and potentially hostile commands. When such commands are executed, they do so under the context of the user specified by the application executing the statement. This capability allows attackers to gain control of all database resources accessible by that user, up to and including the ability to execute commands on the hosting system.",
        "severity": "Critical",
        "ref": "https://www.owasp.org/index.php/SQL_Injection",
        "cvss": "6.0-9.0",
        "cve": ""
    },
    {
        "title": "Blind SQL Injection",
        "poc": "",
        "desc": "Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the applications response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query's syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible.",
        "severity": "Critical",
        "ref": "https://www.owasp.org/index.php/Blind_SQL_Injection",
        "cvss": "6.0-9.0",
        "cve": ""
    },
    {
        "title": "Path Traversal",
        "poc": "",
        "desc": "File resources are accessed using references constructed from user-supplied data, allowing a malicious user to access files outside the web root that were not intended to be exposed.",
        "severity": "Medium",
        "ref": "https://www.owasp.org/index.php/Path_Traversal\nhttp://projects.webappsec.org/w/page/13246952/Path Traversal\nhttp://cwe.mitre.org/data/definitions/22.html",
        "cvss": "4.0-9.0",
        "cve": ""
    },	
    {
        "title": "[C/C++] Format String",
        "poc": "",
        "desc": "Format String Attacks alter the flow of an application by using string formatting library features to access other memory space. Vulnerabilities occur when user-supplied data are used directly as formatting string input for certain C/C++ functions (e.g. fprintf, printf, sprintf, setproctitle, syslog, ...).",
        "severity": "High",
        "ref": "https://en.wikipedia.org/wiki/Uncontrolled_format_string",
        "cvss": "6",
        "cve": ""
    },	
    {
        "title": "Integer Overflows",
        "poc": "",
        "desc": "An Integer Overflow is the condition that occurs when the result of an arithmetic operation, such as multiplication or addition, exceeds the maximum size of the integer type used to store it. When an integer overflow occurs, the interpreted value will appear to have “wrapped around” the maximum value and started again at the minimum value, similar to a clock that represents 13:00 by pointing at 1:00.\n\nFor example, an 8-bit signed integer on most common computer architectures has a maximum value of 127 and a minimum value of -128. If a programmer stores the value 127 in such a variable and adds 1 to it, the result should be 128. However, this value exceeds the maximum for this integer type, so the interpreted value will “wrap around” and become -128.",
        "severity": "High",
        "ref": "http://projects.webappsec.org/w/page/13246926/Format String",
        "cvss": "6",
        "cve": ""
    },	
    {
        "title": "[XXE] XML External Entities",
        "poc": "",
        "desc": "This technique takes advantage of a feature of XML to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server/XML application has access to.",
        "severity": "Critical",
        "ref": "http://www.securiteam.com/securitynews/6D0100A5PU.html\nhttps://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing",
        "cvss": "8",
        "cve": ""
    },	
    {
        "title": "Insecure Indexing",
        "poc": "",
        "desc": "Insecure Indexing is a threat to the data confidentiality of the web-site. Indexing web-site contents via a process that has access to files which are not supposed to be publicly accessible has the potential of leaking information about the existence of such files, and about their content. In the process of indexing, such information is collected and stored by the indexing process, which can later be retrieved (albeit not trivially) by a determined attacker, typically through a series of queries to the search engine. The attacker does not thwart the security model of the search engine. As such, this attack is subtle and very hard to detect and to foil - it’s not easy to distinguish the attacker’s queries from a legitimate user’s queries.",
        "severity": "Info",
        "ref": "http://cwe.mitre.org/data/definitions/612.html",
        "cvss": "0",
        "cve": ""
    },
    {
        "title": "OpenSSL Heartbleed",
        "poc": "",
        "desc": "The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs). The Heartbleed bug allows anyone on the Internet to read the memory of the systems protected by the vulnerable versions of the OpenSSL software. This compromises the secret keys used to identify the service providers and to encrypt the traffic, the names and passwords of the users and the actual content. This allows attackers to eavesdrop on communications, steal data directly from the services and users and to impersonate services and users.",
        "severity": "Critical",
        "ref": "http://heartbleed.com/",
        "cvss": "7.5",
        "cve": "CVE-2014-0160"
    },
    {
        "title": "Open Redirect Vulnerability",
        "poc": "",
        "desc": "Open Redirect, unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Unvalidated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application’s access control check and then forward the attacker to privileged functions that they would normally not be able to access.",
        "severity": "Medium",
        "ref": "https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet",
        "cvss": "4.1",
        "cve": ""
    },
    {
        "title": "Server-Side Template Injection",
        "poc": "",
        "desc": "User-controlled data is used as a template engine's template, allowing attackers to access the template context and in some cases inject and run arbitrary code in the application server. Template engines are used to render content using dynamic data. This context data is normally controlled by the user and formatted by the template to generate web pages, emails and the like. Template engines allow powerful language expressions to be used in templates in order to render dynamic content, by processing the context data with code constructs such as conditionals, loops, etc. If an attacker is able to control the template to be rendered, they will be able to inject expressions that will expose context data or even run arbitrary commands on the server.",
        "severity": "High",
        "ref": "http://blog.portswigger.net/2015/08/server-side-template-injection.html",
        "cvss": "6-9",
        "cve": ""
    },
    {
        "title": "[ACE] Arbitrary Code Execution",
        "poc": "",
        "desc": "Code Injection is the general term for attack types which consist of injecting code that is then interpreted/executed by the application. This type of attack exploits poor handling of untrusted data.",
        "severity": "Critical",
        "ref": "https://www.owasp.org/index.php/Code_Injection\nhttps://en.wikipedia.org/wiki/Arbitrary_code_execution",
        "cvss": "8-10",
        "cve": ""
    },
    {
        "title": "[RCE] Remote Code Execution",
        "poc": "",
        "desc": "Remote code execution can be best described as an action which involves an attacker executing code remotely using system vulnerabilities. Such code can run from a remote server, which means that the attack can originate from anywhere around the world giving the attacker access to the PC. Once a hacker gains access to a system, they’ll be able to make changes within the target computer.",
        "severity": "Critical",
        "ref": "https://www.owasp.org/index.php/Code_Injection",
        "cvss": "8-10",
        "cve": ""
    },
    {
        "title": "File Upload Vulnerability",
        "poc": "",
        "desc": "CWE-434 describes: “Unrestricted Upload of File with Dangerous Type” a system with this weakness may authenticate the upload function but fail to verify or restrict the file to the type intended by the software developer. For example uploading a malware executable instead of a picture file to a photograph sharing website.",
        "severity": "High",
        "ref": "https://cwe.mitre.org/data/definitions/434.html\nhttps://www.owasp.org/index.php/Unrestricted_File_Upload",
        "cvss": "6-10",
        "cve": ""
    }    
]



